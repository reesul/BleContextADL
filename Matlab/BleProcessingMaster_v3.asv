%% 
% Script for trying to process All BLE devices
%
%  v1: Pull data from file, use similarity metric to try resolving changed
%  MAC addresses, build dictionary based on MACs that can resolve to device
%  ID
%
%  v2: Batch several days' worth of data together 
%       Generate 'occurrence' intervals in which the beacon was seen
%       contiguously 
%
%  v3: Build adjacency/similarity matrix out of BLE

%% Initial variable setup
recognizedDevices = containers.Map;
occurrenceMap = containers.Map('KeyType', 'double', 'ValueType', 'any');
similarityThreshold = 0.9;
numUniqueDev = 0;

%% extract data from file and perform identfication to resolve random MACs

datapath = 'C:\Users\reesul\Documents\Activity_Recognition\Nearables\BLE_project_data\Reese\20_day_set\'
dataDirs = ls(datapath)
blefile = 'ble_data.txt';


for d=1:size(dataDirs,1)
    if contains(dataDirs(d,:),'-')
        blePath = strcat(datapath,strtrim(dataDirs(d,:)));
        blePath = strcat(blePath,'\');
        blePath = strcat(blePath,blefile);
    
        %reformat data into usable form; assumes a specific format
        [bleData,~] = formatBleData(blePath);
        
        [recognizedDevices, numUniqueDev] = identifyBeacons(bleData, recognizedDevices, numUniqueDev, similarityThreshold);
        
        occurrenceMap = occurrenceIntervals(bleData, recognizedDevices, occurrenceMap, d);
        
        %save state due to the time complexity of this process
        save('identificationProgress.mat', 'd', 'recognizedDevices', 'numUniqueDev', 'occurrenceMap');
    end
    
end


macSet = cell(size(occurrenceMap));
k=occurrenceMap.keys();
for i=1:length(k)
    kk = k{i};
    macSet{i} = findMACs(kk, recognizedDevices);
end

%sort this for diagnostic purposes
[~,I] = sort(cellfun(@length,macSet))
macSet=macSet(I);
clear I

%save state - this section takes a very long time to process
save('identification.mat', 'recognizedDevices', 'numUniqueDev', 'occurrenceMap', 'macSet');

delete identificationProgress.mat
%% Clean data
[cleanOMap, cleanDevices, cleanNumDev] = cleanBLE(occurrenceMap, recognizedDevices, numUniqueDev);

% log data for viewing
if isfile('occurrences.log')
    delete 'occurrences.log'
end
diary('occurrences.log');
for i=1:cleanNumDev
    if cleanOMap.isKey(i)
        disp('looking at device:')
        disp(i)
        disp(cleanOMap(i))
    end
end
diary off

%% Generate records based on set of good beacons
[records, countArr, supportArr] = createRecords(datapath, cleanDevices, 30*1000, cleanNumDev); % use 30 second interval for creating records

% Use a threshold here to create a smaller set of 'good' records for
% clustering; TODO try different threshold values
% goodRecords = find(records{4,:} < threshold);
% goodRecords = records(goodRecords);
%% Generate similarity matrix
S = similarityBLE(cleanOMap);
%[normS, posS] = normalizeSimilarity(S);

%%Do clustering
[x,Tclusters,OGclusters]=bleAPCluster(normS, 'damp', 0.5, 'clusterSize', 1, 'scalingFactor', 1);
